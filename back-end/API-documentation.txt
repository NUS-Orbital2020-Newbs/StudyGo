url: https://fir-tut2-82e4f.firebaseapp.com/api/v1


// all response (res) will also contain two more fields: StatusCode (according to HTTP Status Code) and msg (error message if any),
// all status code = 200 means that the operation is success, and status code = 500 means that the operation failed unexpectedly;
// otherwise, for example, if POST /register return the StatusCode == 409 then the email is registered with another account.

// error message for status code 500 now include: the route, the body of the request (JSON), and the error description

------------------------------------------------------LOG IN / REGISTER------------------------------------------------------------------
// register an account with an email and password
POST /register
    req: email (string), password (string), uesrname (string), googleId (string (optional))
    res: 
    code:  409 = Email already registered

// log into an account with an email and password
POST /login
    req: email (string), password (string)
    res: userId (string)
    code:  401 = Incorrect email or password


// get all user's data with the id
POST /users
    req: id (string)
    res: email (string)
         password (string)
         username (string)
    code:  404 = Invalid ID

------------------------------------------------------TO DO LIST------------------------------------------------------------------------

// add a new task into the to do list
POST /to-do-list
    req: id (string (this one is user id)), task (object: { title (string), date (date), noti (boolean) })
    res: taskId (string)
    code:  404 = Invalid user ID

// update an exist task in the to do list
PUT /to-do-list
    req: userId (string), taskId (string), newTitle (string), newDate (date), newNoti
    res: 
    code:  404 = Invalid user ID or task ID

// return all current task in the to do list (as an array of tasks)
POST /to-do-list/all
    req: id (string)
    res: tasks (array of objects: { id (string), date (date), task (string) }[])
    code:  404 = Invalid user ID

// delete a task in the to do list
DELETE /to-do-list
    req: userId (string), taskId (string)
    res: 
    code:  404 = Invalid user ID or task ID

------------------------------------------------------CALENDAR-------------------------------------------------------------------------

// show all events of a particular month of a year
POST /calendar/events
    req: userId (string), month (number), year (number)
    res: events ({<date>:object[])})
    code:  404 = Invalid user ID

// add an event
POST /calendar
    req: userId (string), date (string (YYYY-MM-DD...)), event (any object)
    res: eventId (string)
    code:  404 = Invalid user ID 

// edit an event in a particular day
PUT /calendar
    req: userId (string), date (string (YYYY-MM-DD...)), newEvent (any object), eventId (string)
    res:
    code:  404 = Invalid user ID, event ID or date

// delete an event in a particular day
DELETE /calendar
    req: userId (string), date (string (YYYY-MM-DD...)), eventId (string)
    res:
    code:  404 = Invalid user ID, event ID or date

------------------------------------------------------TIMETABLE----------------------------------------------------------------------

// return all tasks in timetable (each task is )
POST /timetable/all
    req: userId (string)
    res: timetable (object: keys are days in a week (monday,...), values are arrays of tasks, each task is an object with an additional field "id")
    res:  404 = Invalid user ID

// add a task in the timetable
POST /timetable
    req: userId (string), day ("monday", "tuesday",...), task (object)
    res: taskId
    code:  404 = Invalid user ID

// update a task in the timetable
PUT /timetable
    req: userId (string), taskId (string), newTask (object), newDay ("monday",...)
    res: 
    code:  404 = Invalid user ID or task ID

// delete a task in the timetable
DELETE /timetable
    req: userId (string), taskId (string)
    res:
    code:  404 = Invalid user ID or task ID

-------------------------------------------------------PROGRESS TRACKER------------------------------------------------------------------

// return all registered modules of user
POST /progress-tracker/modules/all
    req: userId (string)
    res: modules

// add new module to server
POST /progress-tracker/modules/admin
    req: moduleId (string), title (string)

// register new module
POST /progress-tracker/modules
    req: userId (string), moduleId (string)

// delete a module
DELETE /progress-tracker/modules
    req: userId (string), moduleId (string)

// return all tasks (finished or unfinished)
POST /progress-tracker/tasks/list
    req: userId (string), moduleId (string), isFinished (boolean)

// add new task
POST /progress-tracker/tasks
    req: userId, moduleId, title, isFinished, details
    res: taskId

// update a task
PUT /progress-tracker/tasks
    req: userId, taskId, title, isFinished, details

// delete a task
DELETE /progress-tracker/tasks
    req: userId (string), taskId (string)

// link user's task to a public one or link to nothing
POST /progress-tracker/tasks/ref
    req: userId, taskId, moduleId, refId, isHost

// get all tasks (either finished or unfinished)
POST /progress-tracker/tasks/all
    req: userId, moduleId, isFinished
    res: tasks

// create a new task on the server
POST /progress-tracker/tasks/admin
    req: moduleId, title, userId
    res: taskId

// edit the task title on server
PUT /progress-tracker/tasks/admin/title
    req: userId, moduleId, taskId, newTitle

// update stat of a task on server
PUT /progress-tracker/tasks/admin/stat
    req: moduleId, taskId, newRegistered (-1, 0, 1), newCompleted (-1, 0, 1)

// get all tasks on server of a module
POST /progress-tracker/tasks/admin/all
    req: moduleId
    res: allTasks

